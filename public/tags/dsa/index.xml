<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DSA on Code World</title>
    <link>https://arnab7070.github.io/tags/dsa/</link>
    <description>Recent content in DSA on Code World</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 Jan 2023 00:24:43 +0530</lastBuildDate><atom:link href="https://arnab7070.github.io/tags/dsa/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tail Recursion</title>
      <link>https://arnab7070.github.io/sections/dsa/tail-recursion/</link>
      <pubDate>Wed, 25 Jan 2023 00:24:43 +0530</pubDate>
      
      <guid>https://arnab7070.github.io/sections/dsa/tail-recursion/</guid>
      <description>Code #include &amp;lt;iostream&amp;gt; using namespace std; int factorial(int n, int a){ if(n==0 || n==1){ return a; } return factorial(n-1,n*a); } int fibonacci(int n, int a, int b){ if(n == 0){ return a; } if(n == 1){ return b; } return fibonacci(n-1,b,a+b); } int main(){ cout&amp;lt;&amp;lt;factorial(5,1)&amp;lt;&amp;lt;endl; // cout&amp;lt;&amp;lt;fibonacci(5,0,1)&amp;lt;&amp;lt;endl; for(int i = 0; i &amp;lt;= 5; i++){ cout&amp;lt;&amp;lt;fibonacci(i,0,1)&amp;lt;&amp;lt;&amp;#34; &amp;#34;; } cout&amp;lt;&amp;lt;endl; return 0; } Output 1200 1 1 2 3 5 </description>
    </item>
    
    <item>
      <title>Tower Of Hanoi</title>
      <link>https://arnab7070.github.io/sections/dsa/tower-of-hanoi/</link>
      <pubDate>Wed, 25 Jan 2023 00:24:43 +0530</pubDate>
      
      <guid>https://arnab7070.github.io/sections/dsa/tower-of-hanoi/</guid>
      <description>Tower Of Hanoi Algorithm /*STARTProcedure Hanoi(disk, source, dest, aux)IF disk == 1, THENmove disk from source to destELSEHanoi(disk - 1, source, aux, dest) // Step 1move disk from source to dest // Step 2Hanoi(disk - 1, aux, dest, source) // Step 3END IFEND ProcedureSTOP*/ Code #include &amp;lt;iostream&amp;gt; using namespace std; void TowerOfHanoi(int n, char src, char aux, char dest) { if (n == 1) { cout &amp;lt;&amp;lt; &amp;#34;Move Disk No.</description>
    </item>
    
    <item>
      <title>Priority Queue</title>
      <link>https://arnab7070.github.io/posts/priority-queue/</link>
      <pubDate>Thu, 13 Oct 2022 20:14:57 +0530</pubDate>
      
      <guid>https://arnab7070.github.io/posts/priority-queue/</guid>
      <description>Question Implement the basic functions of priority queue using C language
Code /* * C Program to Implement Priority Queue to Add and Delete Elements */ #include &amp;lt;stdio.</description>
    </item>
    
    <item>
      <title>BuildTree</title>
      <link>https://arnab7070.github.io/posts/buildtree/</link>
      <pubDate>Tue, 11 Oct 2022 12:10:15 +0530</pubDate>
      
      <guid>https://arnab7070.github.io/posts/buildtree/</guid>
      <description>Question Write a code to build a tree from the inorder and preorder traversal
Concepts In order to build a tree we can not only depend on the inorder.</description>
    </item>
    
    <item>
      <title>Infix to Postfix</title>
      <link>https://arnab7070.github.io/posts/infix-to-postfix/</link>
      <pubDate>Mon, 10 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://arnab7070.github.io/posts/infix-to-postfix/</guid>
      <description>Question Convert infix expression to postfix expression using C++
Some Important Concepts Infix notation is the notation in which operators come between the required operands. Postfix notation is the type of notation in which operator comes after the operand.</description>
    </item>
    
    <item>
      <title>Stack Using Linked List</title>
      <link>https://arnab7070.github.io/posts/stack-using-linked-list/</link>
      <pubDate>Mon, 03 Oct 2022 20:51:21 +0530</pubDate>
      
      <guid>https://arnab7070.github.io/posts/stack-using-linked-list/</guid>
      <description>Question Write a code to implement Stack using Linked List
Algorithm It&amp;rsquo;s so simple to implement because stack uses LIFO and thats why we use insertAtBegin function only for inserting elements.</description>
    </item>
    
    <item>
      <title>Polynomial Addition Using Linked List</title>
      <link>https://arnab7070.github.io/posts/polynomial-addition-by-linked-list/</link>
      <pubDate>Mon, 03 Oct 2022 00:24:43 +0530</pubDate>
      
      <guid>https://arnab7070.github.io/posts/polynomial-addition-by-linked-list/</guid>
      <description>Add two polynomials using Linked List Algorithm Recursive Approach (Easy) If both the numbers are null then return. else if compare the power, if same then add the coefficients and recursively call</description>
    </item>
    
    <item>
      <title>Binary Search Tree</title>
      <link>https://arnab7070.github.io/posts/binary-search-tree/</link>
      <pubDate>Thu, 29 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://arnab7070.github.io/posts/binary-search-tree/</guid>
      <description>Implementation of Binary Search Tree Question Write a menu driven program in C or C++ to perform the following operations on Binary Search Tree.
insert a node.</description>
    </item>
    
    <item>
      <title>BFS Traversal</title>
      <link>https://arnab7070.github.io/posts/bfs-traversal/</link>
      <pubDate>Fri, 23 Sep 2022 20:44:48 +0530</pubDate>
      
      <guid>https://arnab7070.github.io/posts/bfs-traversal/</guid>
      <description>Code in C++ to perform BFS Code #include&amp;lt;iostream&amp;gt; #include&amp;lt;queue&amp;gt; #include&amp;lt;algorithm&amp;gt; using namespace std; int main(){ queue&amp;lt;int&amp;gt; q; int u; int i = 0; //here we are starting exploration from 0.</description>
    </item>
    
    <item>
      <title>Menu Driven Program For Doubly Linked List</title>
      <link>https://arnab7070.github.io/posts/doubly-linked-list/</link>
      <pubDate>Sat, 17 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://arnab7070.github.io/posts/doubly-linked-list/</guid>
      <description>Question Write a menu driven program in C++ to perform the following operations on double linked list.
insert a node at the beginning of the list.</description>
    </item>
    
    <item>
      <title>Frequency Of Elements</title>
      <link>https://arnab7070.github.io/posts/frequency-of-elements/</link>
      <pubDate>Thu, 15 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://arnab7070.github.io/posts/frequency-of-elements/</guid>
      <description>Question Q. Program to find the frequency of each element of an array.
Algorithm Step 1: Create a map of integer to store key-value pairs. map&amp;lt;int,int&amp;gt;.</description>
    </item>
    
  </channel>
</rss>
